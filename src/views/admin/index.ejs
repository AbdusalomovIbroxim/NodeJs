<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin</title>
  <link rel="stylesheet" href="/styles/css/admin/style.css">
  <style>
    .admin-section {
      display: none;
    }
    .admin-section.active {
      display: block;
    }
  </style>
</head>
<body>

  <nav id="admin-nav" class="admin-nav">
    <ul class="nav-list">
      <li class="nav-item">
        <a href="#orders-section" class="nav-link" data-section="orders-section">Orders</a>
      </li>
      <li class="nav-item">
        <a href="#create-category-section" class="nav-link" data-section="create-category-section">Categories</a>
      </li>
      <li class="nav-item">
        <a href="#update-user-status-section" class="nav-link" data-section="update-user-status-section">User Status</a>
      </li>
      <li class="nav-item">
        <a href="#manage-products-section" class="nav-link" data-section="manage-products-section">Manage Products</a>
      </li>
    </ul>
  </nav>

  <main>
    <!-- Orders Section -->
    <section id="orders-section" class="admin-section">
      <h2 class="section-title">Orders</h2>
      <table id="orders-table" class="orders-table">
        <thead>
          <tr>
            <th class="table-header">Order Item ID</th>
            <th class="table-header">Order ID</th>
            <th class="table-header">Product Id</th>
            <th class="table-header">Quantity</th>
            <th class="table-header">Created at</th>
          </tr>
        </thead>
        <tbody id="orders-tbody" class="orders-tbody">
          <!-- Data will be loaded here -->
        </tbody>
      </table>
    </section>

    <!-- Categories Section -->
    <section id="create-category-section" class="admin-section">
      <h2>Create Category</h2>
      <form id="create-category-form">
        <label for="category-name">Category Name:</label>
        <input type="text" id="category-name" name="categoryName" required>
        <button type="submit">Create Category</button>
      </form>

      <h2>Categories</h2>
      <table id="categories-table" class="categories-table">
        <thead>
          <tr>
            <th class="table-header">Category ID</th>
            <th class="table-header">Category Name</th>
          </tr>
        </thead>
        <tbody id="categories-tbody" class="categories-tbody">
          <!-- Data will be loaded here -->
        </tbody>
      </table>
    </section>

    <!-- User Status Section -->
    <section id="update-user-status-section" class="admin-section">
      <h2>Update User Status</h2>
      <form id="update-user-status-form">
        <label for="user-id">User ID:</label>
        <input type="number" id="user-id" name="userId" required>
        <label for="user-status">New Status:</label>
        <select id="user-status" name="status">
          <option value="true">Active</option>
          <option value="false">Inactive</option>
        </select>
        <button type="submit">Update Status</button>
      </form>

      <h2>Users List</h2>
      <table id="users-table" class="users-table">
        <thead>
          <tr>
            <th class="table-header">User ID</th>
            <th class="table-header">Username</th>
            <th class="table-header">Email</th>
            <th class="table-header">Status</th>
          </tr>
        </thead>
        <tbody id="users-tbody" class="users-tbody">
          <!-- Data will be loaded here -->
        </tbody>
      </table>
    </section>

    <!-- Products Section -->
    <div class="container">
      <section id="manage-products-section" class="admin-section">
        <h2>Manage Products</h2>
        <div class="product-cards-container">
          <div class="product-cards">
          </div>
        </div>
    </section>
  </div>
    
  </main>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
  const navLinks = document.querySelectorAll('.nav-link');
  const sections = document.querySelectorAll('.admin-section');

  function showSection(sectionId) {
    sections.forEach(section => {
      section.classList.toggle('active', section.id === sectionId);
      if (section.id === sectionId) loadSectionData(sectionId);
    });
  }
  function formatDate(dateString) {
  const options = { year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit' };
  return new Date(dateString).toLocaleDateString('en-US', options);
}


  function loadSectionData(sectionId) {
    switch (sectionId) {
      case 'orders-section':
        fetchOrders();
        break;
      case 'create-category-section':
        fetchCategories();
        break;
      case 'update-user-status-section':
        fetchUsers();
        break;
      case 'manage-products-section':
        fetchProducts();
        break;
    }
  }

  async function fetchOrders() {
    try {
      const response = await fetch('/admin/get-all-orders', {
        method: 'GET',
        headers: { 'Authorization': `Bearer ${localStorage.getItem('Authorization')}` }
      });
      const orders = await response.json();
      console.log(orders);

      const tbody = document.getElementById('orders-tbody');
      tbody.innerHTML = orders.map(order => `
        <tr class="table-row">
          <td>${order.id}</td>
          <td>${order.orderId}</td>
          <td><a href="/product/${order.Product.slug}">${order.productId}</a></td>
          <td>${order.quantity}</td>
          <td>${formatDate(order.createdAt)}</td>
        </tr>
      `).join('');
    } catch (error) {
      console.error('Error loading orders:', error);
    }
  }

  async function fetchCategories() {
    try {
      const response = await fetch('/admin/categories', {
        method: 'GET',
        headers: { 'Authorization': `Bearer ${localStorage.getItem('Authorization')}` }
      });
      const categories = await response.json();

      const tbody = document.getElementById('categories-tbody');
      tbody.innerHTML = categories.map(category => `
        <tr class="table-row">
          <td>${category.id}</td>
          <td>${category.name}</td>
        </tr>
      `).join('');
    } catch (error) {
      console.error('Error loading categories:', error);
    }
  }

  async function fetchUsers() {
    try {
      const response = await fetch('/admin/get-users', {
        method: 'GET',
        headers: { 'Authorization': `Bearer ${localStorage.getItem('Authorization')}` }
      });
      const users = await response.json();

      const tbody = document.getElementById('users-tbody');
      tbody.innerHTML = users.map(user => `
        <tr class="table-row">
          <td>${user.id}</td>
          <td>${user.username}</td>
          <td>${user.email}</td>
          <td>${user.isAdmin}</td>
        </tr>
      `).join('');
    } catch (error) {
      console.error('Error loading users:', error);
    }
  }

  async function fetchProducts() {
  try {
    const response = await fetch('admin/products', {
      method: 'GET',
      headers: { 'Authorization': `Bearer ${localStorage.getItem('Authorization')}` }
    });

    // Log the raw response text
    const responseText = await response.text();

    // Parse the response text as JSON
    const products = JSON.parse(responseText);
    console.log(products);

    const container = document.querySelector('.product-cards');
    container.innerHTML = products.map(product => `
      <div class="product-card">
        <img src="${product.images[0].url}" alt="${product.name}">
        <div class="product-card-content">
          <h4>${product.name}</h4>
          <p>$${product.price.toFixed(2)}</p>
        </div>
        <div class="product-card-buttons">
          <a href="/update-product-page?productId=${product.id}" class="btn btn-primary">Update</a>
          <button class="btn btn-danger" onclick="deleteProduct(${product.id})">Delete</button>
        </div>
      </div>
    `).join('');
  } catch (error) {
    console.error('Error loading products:', error);
  }
}

  async function deleteProduct(productId) {
    if (confirm('Are you sure you want to delete this product?')) {
      try {
        const response = await fetch(`/admin/products/delete`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('Authorization')}`
          },
          body: JSON.stringify({ productId })
        });
        const data = await response.json();
        alert('Product deleted successfully');
        fetchProducts(); // Reload products
      } catch (error) {
        console.error('Error deleting product:', error);
      }
    }
  }

  async function createCategory(event) {
    event.preventDefault();

    const form = document.getElementById('create-category-form');
    const formData = new FormData(form);
    const categoryName = formData.get('categoryName');

    try {
      const response = await fetch('/admin/categories', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('Authorization')}`
        },
        body: JSON.stringify({ name: categoryName })
      });

      const result = await response.json();
      if (response.ok) {
        alert('Category created successfully');
        fetchCategories();
        form.reset();
      } else {
        alert(result.message || 'Failed to create category');
      }
    } catch (error) {
      console.error('Error creating category:', error);
    }
  }

  navLinks.forEach(link => {
    link.addEventListener('click', event => {
      event.preventDefault();
      const sectionId = link.getAttribute('data-section');
      showSection(sectionId);
    });
  });

  document.getElementById('create-category-form').addEventListener('submit', createCategory);

  showSection(navLinks[0].getAttribute('data-section'));
});

  </script>

</body>
</html>
