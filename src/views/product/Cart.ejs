<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cart</title>
    <link rel="stylesheet" href="/styles/css/main/styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"
    integrity="sha512-z3gLpd7yknf1YoNbCzqRKc4qyor8gaKU1qmn+CShxbuBusANI9QpRohGBreCFkKxLhei6S9CQXFEbbKuqLg0DA=="
    crossorigin="anonymous" referrerpolicy="no-referrer"/>
    <style>
        /* Add styles for the modal */
        .modal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 1; /* Sit on top */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgb(0,0,0); /* Fallback color */
            background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
        }
        .modal-content {
            background-color: #fefefe;
            margin: 15% auto; /* 15% from the top and centered */
            padding: 20px;
            border: 1px solid #888;
            width: 80%; /* Could be more or less, depending on screen size */
            border-radius: 5px;
        }
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }
        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
        .button {
            padding: 10px 20px;
            margin: 5px;
            border: none;
            border-radius: 5px;
            color: #fff;
            background-color: #007bff;
            cursor: pointer;
            font-size: 16px;
        }
        .button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
    
    <%- include('../pages/navbar.ejs') %>

    <div class="container">
        <div class="card-section" id="cart-items">
            <!-- Products will be added here with JavaScript -->
        </div>
        <button id="open-modal" class="button">Order Now</button> <!-- Button to open the modal -->
    </div>
    
    <!-- The Modal -->
    <div id="order-modal" class="modal">
        <!-- Modal content -->
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Order Summary</h2>
            <div class="card-section" id="order-summary">Your order summary will appear here.</div>
            <p id="total-amount">Total amount: $0.00</p>
            <button id="confirm-order" class="button">Confirm Order</button>
        </div>
    </div>

    <%- include('../pages/footer.ejs') %>

    <script>
   document.addEventListener('DOMContentLoaded', () => {
    let cartItems = [];
    let totalAmount = 0;

    async function fetchCart() {
        try {
            const response = await fetch('/get-cart', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('Authorization')}`
                }
            });

            if (!response.ok) {
                console.log('Ответ не OK:', response);
                throw new Error('Ошибка при получении корзины: ответ сети не OK');
            }

            const data = await response.json();
            cartItems = data.items; // Сохраняем товары глобально
            totalAmount = 0; // Сбрасываем общую сумму

            const container = document.querySelector('#cart-items');
            container.innerHTML = '';

            cartItems.forEach(item => {
                if (item.Product) {
                    const productCard = document.createElement('div');
                    productCard.classList.add('product-card');
                    productCard.setAttribute('data-product-id', item.Product.id);

                    const productLink = document.createElement('a');
                    productLink.href = `/product/${item.Product.slug}`;
                    
                    // Создание элемента изображения
                    const productImage = document.createElement('img');
                    productImage.src = item.Product.images.length > 0 ? item.Product.images[0].url : '/images/products/placeholder.png';
                    productImage.alt = `${item.Product.name} Image`;

                    // Обработка ошибки загрузки изображения
                    productImage.onerror = () => {
                        productImage.src = '/images/products/placeholder.png'; // Заглушка на случай ошибки
                    };

                    productLink.appendChild(productImage);

                    // Создание блока информации о продукте
                    const productInfo = document.createElement('div');
                    productInfo.classList.add('product-info');

                    const productNameLink = document.createElement('a');
                    productNameLink.href = `/product/${item.Product.slug}`;

                    const productName = document.createElement('h3');
                    productName.classList.add('product-name');
                    productName.textContent = item.Product.name;
                    productNameLink.appendChild(productName);

                    const productPrice = document.createElement('p');
                    productPrice.classList.add('product-price');
                    productPrice.textContent = `$${item.Product.price.toFixed(2)}`;

                    const productDescription = document.createElement('p');
                    productDescription.classList.add('product-description');
                    productDescription.textContent = item.Product.description;

                    productNameLink.appendChild(productPrice);
                    productNameLink.appendChild(productDescription);
                    productInfo.appendChild(productNameLink);

                     // Создание блока количества
                     const productCount = document.createElement('p');
                    productCount.classList.add('product-count');
                    productCount.textContent = `Количество: ${item.quantity}`;
                    productInfo.appendChild(productCount);

                    // Создание блока кнопок
                    const productButtons = document.createElement('div');
                    productButtons.classList.add('product-buttons');

                    const addToCartButton = document.createElement('button');
                    addToCartButton.classList.add('add-to-cart');
                    addToCartButton.textContent = 'Add to Cart';

                    const addToFavoritesButton = document.createElement('button');
                    addToFavoritesButton.classList.add('add-to-favorites');
                    addToFavoritesButton.textContent = 'Add to Favorites';

                    productButtons.appendChild(addToCartButton);
                    productButtons.appendChild(addToFavoritesButton);

                    productInfo.appendChild(productButtons);
                    productCard.appendChild(productLink);
                    productCard.appendChild(productInfo);

                    container.appendChild(productCard);

                    // Обновляем общую сумму
                    totalAmount += item.Product.price * item.quantity;
                } else {
                    console.warn('Данные о продукте отсутствуют в элементе:', item);
                }
            });

            // Отображаем общую сумму
            const totalAmountElement = document.getElementById('total-amount');
            totalAmountElement.textContent = `Итоговая сумма: $${totalAmount.toFixed(2)}`;

        } catch (error) {
            console.error('Ошибка при получении корзины:', error);
        }
    }

    async function fetchUserProfile() {
        try {
            const response = await fetch('/me', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('Authorization')}`
                }
            });

            if (!response.ok) {
                window.location.href = '/login';
                return;
            }

            const user = await response.json();
            
            // Вызываем fetchCart после получения профиля пользователя
            fetchCart();
            
        } catch (error) {
            console.error('Ошибка при получении профиля пользователя:', error);
        }
    }

    fetchUserProfile(); // Получаем профиль пользователя при загрузке страницы

    // Функциональность модального окна
    const modal = document.getElementById('order-modal');
    const btn = document.getElementById('open-modal');
    const span = document.getElementsByClassName('close')[0];
    const confirmOrderButton = document.getElementById('confirm-order');

    btn.onclick = function() {
        // Обновляем содержимое модального окна товарами из корзины
        const orderSummary = document.getElementById('order-summary');
        orderSummary.innerHTML = cartItems.map(item => `
            <div class="product-card" data-product-id="${item.Product.id}">
                <a href="/product/${item.Product.slug}">
                    <img src="${item.Product.images.length > 0 ? item.Product.images[0].url : '/images/products/placeholder.png'}" alt="${item.Product.name} Image">
                </a>
                <div class="product-info">
                    <a href="/product/${item.Product.slug}">
                        <h3 class="product-name">${item.Product.name}</h3>
                        <p class="product-price">$${item.Product.price.toFixed(2)}</p>
                        <p class="product-description">${item.Product.description}</p>
                    </a>
                    <p class="product-count">Количество: ${item.quantity}</p>
                    <div class="product-buttons">
                        <button class="add-to-cart">Add to Cart</button>
                        <button class="add-to-favorites">Add to Favorites</button>
                    </div>
                </div>
            </div>
        `).join('');
        modal.style.display = 'block';
    }

    span.onclick = function() {
        modal.style.display = 'none';
    }

    window.onclick = function(event) {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    }

    confirmOrderButton.onclick = async function() {
        try {
            const response = await fetch('/cart/order', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('Authorization')}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ productIds: cartItems.map(item => item.Product.id) })
            });

            if (!response.ok) {
                console.log('Ответ не OK:', response);
                throw new Error('Ошибка при подтверждении заказа: ответ сети не OK');
            }

            alert('Заказ успешно подтвержден!');
            modal.style.display = 'none';
            // Опционально, можно перенаправить или очистить корзину
            fetchCart(); // Обновить корзину или перенаправить на другую страницу
        } catch (error) {
            console.error('Ошибка при подтверждении заказа:', error);
        }
    }
});
</script>

<script src="/scripts/js/add-to-cart.js"></script>


</body>
</html>
