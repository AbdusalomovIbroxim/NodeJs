<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Product</title>
    <link rel="stylesheet" href="/styles/css/main/styles.css">
    <style>
        /* Дополнительные стили для множественной загрузки фотографий */
        .form-container {
            margin: 20px auto;
            max-width: 600px;
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        .form-container h1 {
            text-align: center;
            margin-bottom: 20px;
        }
        .form-container .form {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        .form-container .form label {
            font-weight: bold;
        }
        .form-container .form input[type="text"],
        .form-container .form input[type="number"],
        .form-container .form textarea {
            width: 100%;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
        }
        .form-container .form textarea {
            resize: vertical;
        }
        .form-container .form .button-container {
            display: flex;
            justify-content: flex-end;
            margin-top: 20px;
        }
        .form-container .form button[type="submit"] {
            padding: 10px 20px;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        .form-container .form button[type="submit"]:hover {
            background-color: #0056b3;
        }
        .form-container .image-upload {
            margin-bottom: 20px;
        }

        .form-container .image-upload input {
            display: none;
        }

        .form-container .image-upload label {
            display: block;
            margin-bottom: 5px;
        }
        .form-container .image-preview {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }
        .form-container .image-preview img {
            max-width: 100px;
            max-height: 100px;
            object-fit: cover;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        .form-container .drop-zone {
            border: 2px dashed #ccc;
            padding: 20px;
            text-align: center;
            cursor: pointer;
        }
        .form-container .drop-zone.highlight {
            border-color: #333;
        }
    </style>

<style>
    /* Container for the select element */
    .form-group {
        margin-bottom: 1em;
    }

    /* Label styling */
    label {
        display: block;
        font-weight: bold;
        margin-bottom: 0.5em;
    }

    /* Select element styling */
    select {
        width: 100%;
        padding: 0.5em;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 1em;
        background-color: #fff;
        color: #333;
    }

    /* Option element styling */
    option {
        padding: 0.5em;
        font-size: 1em;
    }

    /* Optional: Add focus styles */
    select:focus {
        border-color: #007bff;
        outline: none;
        box-shadow: 0 0 0 0.2em rgba(38, 143, 255, 0.25);
    }
</style>

</head>
<body>


    <%- include('../pages/navbar.ejs') %>



    <div class="form-container">
        <h1>Add a New Product</h1>
        
        <form action="/add-product" method="POST" enctype="multipart/form-data" class="form" id="addProductForm">
            <div>
                <label for="name">Product Name:</label>
                <input type="text" id="name" name="name" required>
            </div>
            <div>
                <label for="price">Product Price:</label>
                <input type="number" step="0.01" id="price" name="price" required min="0.01">
            </div>
            <div>
                <label for="description">Product Description:</label>
                <textarea id="description" name="description"></textarea>
            </div>
            <div class="image-upload">
                <label for="images">Product Images:</label>
                <input type="file" id="images" name="images" accept="image/*" multiple>
            </div>
            <div class="image-preview" id="imagePreview"></div>
            <div class="drop-zone" id="dropZone">
                <p>Drag & Drop or Click to Upload</p>
                <input type="file" id="dropImage" name="dropImage" accept="image/*" style="display: none;">
            </div>
            <div class="form-group">
                <label for="categories">Product Categories:</label>
                <select id="categories" name="categories">
                    <!-- Options will be populated dynamically -->
                </select>
            </div>
            
            <div class="button-container">
                <button type="submit">Add Product</button>
            </div>
        </form>
        
        

    </div>


    <%- include('../pages/footer.ejs') %>

    <script>
        // JavaScript для предварительного просмотра загруженных изображений и drag-and-drop
        const input = document.getElementById('images');
        const previewContainer = document.getElementById('imagePreview');
        const dropZone = document.getElementById('dropZone');
        const dropImageInput = document.getElementById('dropImage');
        
        input.addEventListener('change', handleFileSelect);
        dropZone.addEventListener('dragover', handleDragOver);
        dropZone.addEventListener('dragleave', handleDragLeave);
        dropZone.addEventListener('drop', handleDrop);
        dropZone.addEventListener('click', () => dropImageInput.click());
        dropImageInput.addEventListener('change', handleFileSelect);

        function handleFileSelect(event) {
            const files = event.target.files || event.dataTransfer.files;

            Array.from(files).forEach(file => {
                const reader = new FileReader();
                reader.onload = function() {
                    const imageElement = document.createElement('img');
                    imageElement.src = reader.result;
                    previewContainer.appendChild(imageElement);
                }
                reader.readAsDataURL(file);
            });
        }


        function handleDragOver(event) {
            event.preventDefault();
            dropZone.classList.add('highlight');
        }

        function handleDragLeave(event) {
            event.preventDefault();
            dropZone.classList.remove('highlight');
        }

        function handleDrop(event) {
            event.preventDefault();
            dropZone.classList.remove('highlight');
            const files = event.dataTransfer.files;
            dropImageInput.files = files;
            handleFileSelect(event);
        }
    </script>



<script>
document.addEventListener('DOMContentLoaded', async () => {
    const categoriesSelect = document.getElementById('categories');

    try {
        const response = await fetch('/get-categories');
        const categories = await response.json();

        categories.forEach(category => {
            const option = document.createElement('option');
            option.value = category.id;
            option.textContent = category.name;
            categoriesSelect.appendChild(option);
        });
    } catch (error) {
        console.error('Error fetching categories:', error);
    }
});

</script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        async function handleAddProduct(event) {
            event.preventDefault();

            const token = localStorage.getItem('Authorization');
            if (!token) {
                console.log('No token found. Redirecting to login...');
                window.location.href = '/login';
                return;
            }

            const form = document.getElementById('addProductForm');
            const formData = new FormData(form);

            try {
                // Отправляем POST-запрос с токеном в заголовке
                const response = await fetch('/add-product', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}` // Добавляем токен из localStorage
                        // 'Content-Type': 'multipart/form-data' // Не устанавливайте Content-Type, он устанавливается автоматически для FormData
                    },
                    body: formData
                });

                if (response.ok) {
                    window.location.href = response.url;
                    return;
                }
                console.log('Product add request sent successfully', response);
                
            } catch (error) {
                console.error('Error sending product add request:', error);
            }
        }

        const addProductForm = document.getElementById('addProductForm');
        if (addProductForm) {
            addProductForm.addEventListener('submit', handleAddProduct);
        }
    });
</script>

</body>

</html>
